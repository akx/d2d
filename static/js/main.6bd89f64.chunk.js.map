{"version":3,"sources":["core.tsx","Editor.tsx","App.tsx","index.tsx","ErrorWrapper.tsx","TableView.tsx","table-utils.tsx","XlsxView.tsx","converters.tsx","ErrorDisplay.tsx"],"names":["doTransform","sourceType","source","transform","destType","input","sourceConverters","error","type","phase","data","trim","length","_","lodash","R","ramda","eval","destinationConverters","Editor","value","options","onChange","React","useState","lineWrapping","setLineWrapping","plainEditor","setPlainEditor","e","target","placeholder","className","onBeforeChange","editor","Popup","trigger","Icon","circular","name","style","position","right","bottom","hoverable","plain","Checkbox","label","checked","event","ConverterSelect","handleClick","Menu","fluid","size","map","item","Item","active","onClick","SourceBox","onChangeSource","mode","theme","lineNumbers","TRANSFORM_PLACEHOLDER","TransformBox","onChangeTransform","DestBox","result","comp","element","readOnly","ErrorDisplay","App","setSource","setSourceType","setDestType","setTransform","useMemo","id","Object","keys","split","defaultSize","ReactDOM","render","document","getElementById","defaultRenderError","errorInfo","reset","toString","href","ErrorWrapper","state","resetError","setState","undefined","this","props","renderError","Component","LoadableTable","Loadable","loader","loading","CellRenderer","JSON","stringify","TableView","memo","dataArray","Array","from","columnOrder","columnSet","Set","forEach","datum","column","has","push","add","getColumns","columns","col","accessor","Header","Cell","Error","extension","a","pXLSX","XLSX","ws","utils","json_to_sheet","wb","book_new","book_append_sheet","writeFile","Date","toISOString","ExportButton","format","Button","generateAndDownloadXlsx","alert","XlsxView","textAlign","csv","dsvFormat","scsv","tsv","parse","json","text","toml","yaml","safeLoad","stringTransform","fn","safeDump","table","xlsx","stack"],"mappings":"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","file":"static/js/main.6bd89f64.chunk.js","sourcesContent":["import { destinationConverters, sourceConverters } from \"./converters\";\nimport lodash from \"lodash\";\nimport * as ramda from \"ramda\";\nimport { TransformResult } from \"./types\";\n\nexport function doTransform(sourceType: string, source: string, transform: string, destType: string): TransformResult {\n  let input;\n  try {\n    input = sourceConverters[sourceType](source);\n  } catch (error) {\n    return { error, type: \"error\", phase: \"input\" };\n  }\n\n  let data = input;\n  if (transform.trim().length) {\n    try {\n      const _ = lodash; // eslint-disable-line\n      const R = ramda; // eslint-disable-line\n      eval(transform); // eslint-disable-line\n    } catch (error) {\n      return { error, type: \"error\", phase: \"transform\" };\n    }\n  }\n\n  try {\n    return destinationConverters[destType](data);\n  } catch (error) {\n    return { error, type: \"error\", phase: \"output\" };\n  }\n}\n","import { EditorConfiguration } from \"codemirror\";\nimport { Controlled as ControlledCodeMirror } from \"react-codemirror2\";\nimport React from \"react\";\nimport { Checkbox, Icon, Popup } from \"semantic-ui-react\";\n\ninterface EditorProps {\n  value: string;\n  options: Partial<EditorConfiguration>;\n  onChange: (newValue: string) => void;\n}\n\nconst Editor: React.FC<EditorProps> = ({ value, options, onChange }) => {\n  const [lineWrapping, setLineWrapping] = React.useState(false);\n  const [plainEditor, setPlainEditor] = React.useState(false);\n  return (\n    <>\n      {plainEditor ? (\n        <textarea value={value} onChange={e => onChange(e.target.value)} placeholder={options.placeholder} />\n      ) : (\n        <ControlledCodeMirror\n          className=\"code-editor\"\n          value={value}\n          options={{ ...options, lineWrapping }}\n          onBeforeChange={(editor, data, value) => onChange(value)}\n        />\n      )}\n      <Popup\n        trigger={\n          <Icon\n            circular\n            name=\"setting\"\n            style={{\n              position: \"absolute\",\n              right: \"5px\",\n              bottom: \"5px\",\n            }}\n          />\n        }\n        hoverable\n        plain\n      >\n        <Checkbox\n          label=\"Wrap Lines\"\n          checked={lineWrapping}\n          onChange={(event, data) => setLineWrapping(!!data.checked)}\n        />\n        <br />\n        <Checkbox\n          label=\"Plain Editor\"\n          checked={plainEditor}\n          onChange={(event, data) => setPlainEditor(!!data.checked)}\n        />\n      </Popup>\n    </>\n  );\n};\n\nexport default Editor;\n","import React from \"react\";\n\nimport { destinationConverters, sourceConverters } from \"./converters\";\nimport { doTransform } from \"./core\";\nimport { Menu, MenuItemProps } from \"semantic-ui-react\";\nimport { TransformResult } from \"./types\";\nimport { ErrorDisplay } from \"./ErrorDisplay\";\nimport SplitPane from \"react-split-pane\";\nimport Editor from \"./Editor\";\n\nconst dataTheme = \"solarized light\";\nconst codeTheme = \"solarized dark\";\n\ninterface Styleable {\n  style?: React.CSSProperties;\n}\n\ninterface SourceProps extends Styleable {\n  source: string;\n  sourceType: string;\n  onChangeSource: (str: string) => void;\n}\n\ninterface TransformProps extends Styleable {\n  transform: string;\n  onChangeTransform: (s: string) => void;\n}\n\ninterface DestProps extends Styleable {\n  destType: string;\n  result: TransformResult;\n}\n\ninterface ConverterSelectProps extends Styleable {\n  value: string;\n  options: string[];\n  onChange: (val: string) => void;\n}\n\nconst ConverterSelect: React.FC<ConverterSelectProps> = ({ value, options, onChange, style }) => {\n  const handleClick = (e: React.MouseEvent, { name }: MenuItemProps) => name && onChange(name);\n  return (\n    <Menu fluid size=\"mini\" style={style}>\n      {options.map(item => (\n        <Menu.Item name={item} active={value === item} onClick={handleClick} />\n      ))}\n    </Menu>\n  );\n};\n\nconst SourceBox: React.FC<SourceProps> = ({ sourceType, source, onChangeSource, style }) => (\n  <div className=\"codebox-wrapper\" style={style}>\n    <Editor\n      value={source}\n      options={{\n        mode: sourceType,\n        theme: dataTheme,\n        lineNumbers: true,\n        placeholder: `Paste or type in ${sourceType} data here.`,\n      }}\n      onChange={onChangeSource}\n    />\n  </div>\n);\n\nconst TRANSFORM_PLACEHOLDER = `\n// Feel free to modify \\`data\\` using JavaScript here.\n// * Lodash is available as \\`_\\`\n// * Ramda is available as \\`R\\`\n`.trim();\n\nconst TransformBox: React.FC<TransformProps> = ({ transform, onChangeTransform, style }) => (\n  <div className=\"codebox-wrapper\" style={style}>\n    <Editor\n      value={transform}\n      options={{\n        mode: \"javascript\",\n        theme: codeTheme,\n        lineNumbers: true,\n        placeholder: TRANSFORM_PLACEHOLDER,\n      }}\n      onChange={onChangeTransform}\n    />\n  </div>\n);\n\nconst DestBox: React.FC<DestProps> = ({ destType, result, style }) => {\n  let comp: React.ReactChild | null = null;\n  switch (result.type) {\n    case \"element\":\n      comp = result.element;\n      break;\n    case \"string\":\n      comp = (\n        <Editor\n          value={result.value}\n          options={{\n            mode: destType,\n            theme: dataTheme,\n            lineNumbers: true,\n            readOnly: true,\n            placeholder: `Output will appear here in ${destType}.`,\n          }}\n          onChange={() => void 8}\n        />\n      );\n      break;\n    case \"error\":\n      comp = <ErrorDisplay result={result} />;\n      break;\n  }\n  return (\n    <div className=\"codebox-wrapper\" style={style}>\n      {comp}\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  const [source, setSource] = React.useState(\"\");\n  const [sourceType, setSourceType] = React.useState(\"text\");\n  const [destType, setDestType] = React.useState(\"text\");\n  const [transform, setTransform] = React.useState(\"\");\n  const result: TransformResult = React.useMemo(() => doTransform(sourceType, source, transform, destType), [\n    sourceType,\n    source,\n    transform,\n    destType,\n  ]);\n  return (\n    <>\n      <div id=\"settings\">\n        <div>\n          Input Format\n          <ConverterSelect value={sourceType} options={Object.keys(sourceConverters)} onChange={setSourceType} />\n        </div>\n        <div>\n          Output Format\n          <ConverterSelect value={destType} options={Object.keys(destinationConverters)} onChange={setDestType} />\n        </div>\n      </div>\n      <div id=\"main-panes\">\n        <SplitPane split=\"vertical\" defaultSize=\"35%\">\n          <SourceBox source={source} sourceType={sourceType} onChangeSource={setSource} />\n          <SplitPane split=\"vertical\" defaultSize=\"40%\">\n            <TransformBox transform={transform} onChangeTransform={setTransform} />\n            <DestBox destType={destType} result={result} />\n          </SplitPane>\n        </SplitPane>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-table/react-table.css\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/solarized.css\";\nimport \"codemirror/mode/yaml/yaml\";\nimport \"codemirror/mode/toml/toml\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/addon/display/placeholder\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React from \"react\";\n\ntype ErrorRenderer = (error: Error, errorInfo: React.ErrorInfo | undefined, reset: () => void) => React.ReactChild;\n\nconst defaultRenderError: ErrorRenderer = (error, errorInfo, reset) => (\n  <div>\n    Oops! An error occurred: ${error.toString()}\n    <br />\n    {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n    <a href=\"#\" onClick={reset}>\n      Try again\n    </a>\n  </div>\n);\n\ninterface ErrorWrapperProps {\n  render: () => React.ReactChild;\n  renderError?: ErrorRenderer;\n}\n\ninterface ErrorWrapperState {\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n}\n\nexport default class ErrorWrapper extends React.Component<ErrorWrapperProps, ErrorWrapperState> {\n  public state: ErrorWrapperState = {};\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n    this.setState({ error, errorInfo });\n  }\n\n  render() {\n    if (this.state.error) {\n      return (this.props.renderError || defaultRenderError)(this.state.error, this.state.errorInfo, this.resetError);\n    }\n    return this.props.render();\n  }\n\n  private resetError = () => {\n    this.setState({ error: undefined, errorInfo: undefined });\n  };\n}\n","import { DestinationConverter } from \"./types\";\nimport ErrorWrapper from \"./ErrorWrapper\";\nimport React from \"react\";\nimport { ErrorDisplay } from \"./ErrorDisplay\";\nimport { getColumns } from \"./table-utils\";\nimport Loadable from \"react-loadable\";\nimport { CellInfo } from \"react-table\";\n\nconst LoadableTable = Loadable({\n  loader: () => import(\"react-table\"),\n  loading: () => <div>Loading table</div>,\n});\n\nconst CellRenderer = ({ value }: CellInfo) => {\n  if (typeof value === \"object\") {\n    try {\n      value = JSON.stringify(value);\n    } catch (error) {\n      value = \"<unrenderable>\";\n    }\n  }\n  return <>{value}</>;\n};\n\nconst TableView = React.memo(({ data }: { data: any }) => {\n  try {\n    const dataArray = Array.from(data);\n    const columnOrder = getColumns(dataArray);\n    if (!columnOrder.length) {\n      return (\n        <ErrorDisplay\n          result={{\n            phase: \"output\",\n            error: new Error(\"Unable to figure out columns\"),\n            type: \"error\",\n          }}\n        />\n      );\n    }\n    return (\n      <LoadableTable\n        data={dataArray}\n        columns={columnOrder.map(col => ({ accessor: col, Header: col, Cell: CellRenderer }))}\n      />\n    );\n  } catch (error) {\n    return <ErrorDisplay result={{ phase: \"output\", error, type: \"error\" }} />;\n  }\n});\n\nexport const tableConverter: DestinationConverter = data => ({\n  error: null,\n  type: \"element\",\n  element: <ErrorWrapper render={() => <TableView data={data} />} />,\n});\n","export function getColumns(dataArray: any[]) {\n  const columnOrder: string[] = [];\n  const columnSet = new Set<string>();\n  dataArray.forEach(\n    datum =>\n      datum &&\n      Object.keys(datum as object).forEach(column => {\n        if (!columnSet.has(column)) {\n          columnOrder.push(column);\n          columnSet.add(column);\n        }\n      }),\n  );\n  return columnOrder;\n}\n","import { DestinationConverter } from \"./types\";\nimport React from \"react\";\nimport { Button } from \"semantic-ui-react\";\n\nasync function generateAndDownloadXlsx(data: any, extension: string) {\n  const pXLSX = import(\"xlsx\");\n  const dataArray = Array.from(data);\n  const XLSX = await pXLSX;\n  const ws = XLSX.utils.json_to_sheet(dataArray);\n  const wb = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(wb, ws, \"d2d\");\n  XLSX.writeFile(wb, `d2d-${new Date().toISOString()}.${extension}`);\n}\n\nconst ExportButton = ({ label, format, data }: { label: string; format: string; data: any }) => (\n  <Button\n    onClick={event => {\n      try {\n        generateAndDownloadXlsx(data, format);\n      } catch (error) {\n        alert(error);\n      }\n    }}\n  >\n    {label}\n  </Button>\n);\n\nconst XlsxView = ({ data }: { data: any }) => {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <ExportButton label=\"Download XLSX\" format=\"xlsx\" data={data} />\n      <ExportButton label=\"Download XLS\" format=\"xls\" data={data} />\n      <ExportButton label=\"Download ODS\" format=\"ods\" data={data} />\n    </div>\n  );\n};\n\nexport const xlsxConverter: DestinationConverter = data => ({\n  error: null,\n  type: \"element\",\n  element: <XlsxView data={data} />,\n});\n","import { dsvFormat } from \"d3-dsv\";\nimport toml from \"toml\";\nimport yaml from \"js-yaml\";\nimport { DestinationConverter, SourceConverter, StringTransformResult } from \"./types\";\nimport { tableConverter } from \"./TableView\";\nimport { xlsxConverter } from \"./XlsxView\";\n\nconst csv = dsvFormat(\",\");\nconst scsv = dsvFormat(\";\");\nconst tsv = dsvFormat(\"\\t\");\n\nexport const sourceConverters: { [key: string]: SourceConverter } = {\n  csv: csv.parse,\n  scsv: scsv.parse,\n  json: JSON.parse,\n  text: data => data,\n  toml: toml.parse,\n  tsv: tsv.parse,\n  yaml: yaml.safeLoad,\n};\n\nconst stringTransform = (fn: (data: any) => string) => (data: any) =>\n  ({ value: fn(data), type: \"string\" } as StringTransformResult);\n\nexport const destinationConverters: { [key: string]: DestinationConverter } = {\n  \"json-compact\": stringTransform(JSON.stringify),\n  csv: stringTransform(csv.format),\n  scsv: stringTransform(scsv.format),\n  json: stringTransform(data => JSON.stringify(data, null, 2)),\n  text: stringTransform(data => \"\" + data),\n  tsv: stringTransform(tsv.format),\n  yaml: stringTransform(yaml.safeDump),\n  table: tableConverter,\n  xlsx: xlsxConverter,\n};\n","import React from \"react\";\nimport { ErrorTransformResult } from \"./types\";\n\nexport const ErrorDisplay = ({ result: { error, phase } }: { result: ErrorTransformResult }) => (\n  <div className=\"error-result\">\n    <h2>\n      {error.name || \"Error\"} in {phase}\n    </h2>\n    {error.stack ? <div className=\"error-stack\">{error.stack}</div> : <b>{error.toString()}</b>}\n  </div>\n);\n"],"sourceRoot":""}