{"version":3,"sources":["core.tsx","ErrorWrapper.tsx","TableView.tsx","converters.tsx","App.tsx","index.tsx"],"names":["doTransform","sourceType","source","transform","destType","input","sourceConverters","data","trim","length","_","lodash","R","ramda","eval","destinationConverters","error","type","defaultRenderError","errorInfo","reset","toString","href","onClick","ErrorWrapper","state","resetError","setState","undefined","this","props","renderError","render","React","Component","TableView","memo","dataArray","Array","from","columnOrder","columnSet","Set","forEach","datum","Object","keys","column","has","push","add","getColumns","columns","map","col","accessor","Header","csv","d3dsv","json","JSON","parse","text","toml","tsv","yaml","safeLoad","stringTransform","fn","value","stringify","safeDump","table","element","ConverterSelect","options","onChange","style","handleClick","e","name","Menu","fluid","size","item","Item","active","SourceBox","onChangeSource","className","mode","theme","onBeforeChange","editor","TransformBox","onChangeTransform","lineNumbers","placeholder","DestBox","result","comp","readOnly","App","useState","setSource","setSourceType","setDestType","setTransform","useMemo","gridArea","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.76a274ed.chunk.js","sourcesContent":["import { destinationConverters, sourceConverters } from \"./converters\";\nimport lodash from \"lodash\";\nimport * as ramda from \"ramda\";\nimport { TransformResult } from \"./types\";\n\nexport function doTransform(sourceType: string, source: string, transform: string, destType: string): TransformResult {\n  try {\n    const input = sourceConverters[sourceType](source);\n    let data = input;\n    if (transform.trim().length) {\n      const _ = lodash; // eslint-disable-line\n      const R = ramda; // eslint-disable-line\n      eval(transform); // eslint-disable-line\n    }\n    return destinationConverters[destType](data);\n  } catch (error) {\n    return { error, type: \"error\" };\n  }\n}\n","import React from \"react\";\n\ntype ErrorRenderer = (error: Error, errorInfo: React.ErrorInfo | undefined, reset: () => void) => React.ReactChild;\n\nconst defaultRenderError: ErrorRenderer = (error, errorInfo, reset) => (\n  <div>\n    Oops! An error occurred: ${error.toString()}\n    <br />\n    <a href=\"#\" onClick={reset}>\n      Try again\n    </a>\n  </div>\n);\n\ninterface ErrorWrapperProps {\n  render: () => React.ReactChild;\n  renderError?: ErrorRenderer;\n}\n\ninterface ErrorWrapperState {\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n}\n\nexport default class ErrorWrapper extends React.Component<ErrorWrapperProps, ErrorWrapperState> {\n  public state: ErrorWrapperState = {};\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n    this.setState({ error, errorInfo });\n  }\n\n  render() {\n    if (this.state.error) {\n      return (this.props.renderError || defaultRenderError)(this.state.error, this.state.errorInfo, this.resetError);\n    }\n    return this.props.render();\n  }\n\n  private resetError = () => {\n    this.setState({ error: undefined, errorInfo: undefined });\n  };\n}\n","import { DestinationConverter } from \"./types\";\nimport ErrorWrapper from \"./ErrorWrapper\";\nimport ReactTable from \"react-table\";\nimport React from \"react\";\n\nfunction getColumns(dataArray: any[]) {\n  const columnOrder: string[] = [];\n  const columnSet = new Set<string>();\n  dataArray.forEach(datum =>\n    Object.keys(datum as object).forEach(column => {\n      if (!columnSet.has(column)) {\n        columnOrder.push(column);\n        columnSet.add(column);\n      }\n    }),\n  );\n  return columnOrder;\n}\n\nconst TableView = React.memo(({ data }: { data: any }) => {\n  const dataArray = Array.from(data);\n  const columnOrder = getColumns(dataArray);\n  return <ReactTable data={dataArray} columns={columnOrder.map(col => ({ accessor: col, Header: col }))} />;\n});\n\nexport const tableConverter: DestinationConverter = data => ({\n  error: null,\n  type: \"element\",\n  element: <ErrorWrapper render={() => <TableView data={data} />} />,\n});\n","import * as d3dsv from \"d3-dsv\";\nimport toml from \"toml\";\nimport yaml from \"js-yaml\";\nimport { DestinationConverter, SourceConverter, StringTransformResult } from \"./types\";\nimport React from \"react\";\nimport { tableConverter } from \"./TableView\";\n\nexport const sourceConverters: { [key: string]: SourceConverter } = {\n  csv: d3dsv.csvParse,\n  json: JSON.parse,\n  text: data => data,\n  toml: toml.parse,\n  tsv: d3dsv.tsvParse,\n  yaml: yaml.safeLoad,\n};\n\nconst stringTransform = (fn: (data: any) => string) => (data: any) =>\n  ({ value: fn(data), type: \"string\" } as StringTransformResult);\n\nexport const destinationConverters: { [key: string]: DestinationConverter } = {\n  \"json-compact\": stringTransform(JSON.stringify),\n  csv: stringTransform(d3dsv.csvFormat),\n  json: stringTransform(data => JSON.stringify(data, null, 2)),\n  text: stringTransform(data => \"\" + data),\n  tsv: stringTransform(d3dsv.tsvFormat),\n  yaml: stringTransform(yaml.safeDump),\n  table: tableConverter,\n};\n","import React from \"react\";\n\nimport { Controlled as ControlledCodeMirror } from \"react-codemirror2\";\nimport { destinationConverters, sourceConverters } from \"./converters\";\nimport { doTransform } from \"./core\";\nimport { Menu, MenuItemProps } from \"semantic-ui-react\";\nimport { TransformResult } from \"./types\";\n\nconst dataTheme = \"solarized light\";\nconst codeTheme = \"solarized dark\";\n\ninterface Styleable {\n  style?: React.CSSProperties;\n}\n\ninterface SourceProps extends Styleable {\n  source: string;\n  sourceType: string;\n  onChangeSource: (str: string) => void;\n}\n\ninterface TransformProps extends Styleable {\n  transform: string;\n  onChangeTransform: (s: string) => void;\n}\n\ninterface DestProps extends Styleable {\n  destType: string;\n  result: TransformResult;\n}\n\ninterface ConverterSelectProps extends Styleable {\n  value: string;\n  options: string[];\n  onChange: (val: string) => void;\n}\n\nconst ConverterSelect: React.FC<ConverterSelectProps> = ({ value, options, onChange, style }) => {\n  const handleClick = (e: React.MouseEvent, { name }: MenuItemProps) => name && onChange(name);\n  return (\n    <Menu fluid size=\"mini\" style={style}>\n      {options.map(item => (\n        <Menu.Item name={item} active={value === item} onClick={handleClick} />\n      ))}\n    </Menu>\n  );\n};\n\nconst SourceBox: React.FC<SourceProps> = ({ sourceType, source, onChangeSource, style }) => (\n  <div className=\"codebox-wrapper\" style={style}>\n    <ControlledCodeMirror\n      className=\"code-editor\"\n      value={source}\n      options={{\n        mode: sourceType,\n        theme: dataTheme,\n      }}\n      onBeforeChange={(editor, data, value) => onChangeSource(value)}\n    />\n  </div>\n);\n\nconst TransformBox: React.FC<TransformProps> = ({ transform, onChangeTransform, style }) => (\n  <div className=\"codebox-wrapper\" style={style}>\n    <ControlledCodeMirror\n      className=\"code-editor\"\n      value={transform}\n      options={{\n        mode: \"javascript\",\n        theme: codeTheme,\n        lineNumbers: true,\n        placeholder: \"// feel free to modify `data` using JavaScript here\",\n      }}\n      onBeforeChange={(editor, data, value) => onChangeTransform(value)}\n    />\n  </div>\n);\n\nconst DestBox: React.FC<DestProps> = ({ destType, result, style }) => {\n  let comp: React.ReactChild | null = null;\n  switch (result.type) {\n    case \"element\":\n      comp = result.element;\n      break;\n    case \"string\":\n      comp = (\n        <ControlledCodeMirror\n          value={result.value}\n          className=\"code-editor\"\n          options={{\n            mode: destType,\n            theme: dataTheme,\n            lineNumbers: true,\n            readOnly: true,\n          }}\n          onBeforeChange={() => void 8}\n        />\n      );\n      break;\n    case \"error\":\n      comp = <div>{result.error.toString()}</div>;\n      break;\n  }\n  return (\n    <div className=\"codebox-wrapper\" style={style}>\n      {comp}\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  const [source, setSource] = React.useState(\"\");\n  const [sourceType, setSourceType] = React.useState(\"text\");\n  const [destType, setDestType] = React.useState(\"text\");\n  const [transform, setTransform] = React.useState(\"\");\n  const result: TransformResult = React.useMemo(() => doTransform(sourceType, source, transform, destType), [\n    sourceType,\n    source,\n    transform,\n    destType,\n  ]);\n  return (\n    <>\n      <div style={{ gridArea: \"src-header\" }}>\n        <ConverterSelect value={sourceType} options={Object.keys(sourceConverters)} onChange={setSourceType} />\n      </div>\n      <div style={{ gridArea: \"dest-header\" }}>\n        <ConverterSelect value={destType} options={Object.keys(destinationConverters)} onChange={setDestType} />\n      </div>\n      <TransformBox transform={transform} onChangeTransform={setTransform} style={{ gridArea: \"xform-content\" }} />\n      <SourceBox\n        source={source}\n        sourceType={sourceType}\n        onChangeSource={setSource}\n        style={{ gridArea: \"src-content\" }}\n      />\n      <DestBox destType={destType} result={result} style={{ gridArea: \"dest-content\" }} />\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-table/react-table.css\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/solarized.css\";\nimport \"codemirror/mode/yaml/yaml\";\nimport \"codemirror/mode/toml/toml\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/addon/display/placeholder\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}