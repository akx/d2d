{"version":3,"sources":["ErrorDisplay.tsx","core.tsx","ErrorWrapper.tsx","TableView.tsx","table-utils.tsx","XlsxView.tsx","converters.tsx","types.tsx","samples.tsx","Editor.tsx","components/SourceBox.tsx","consts.tsx","components/TransformBox.tsx","components/DestBox.tsx","components/Toolbar.tsx","App.tsx","index.tsx"],"names":["ErrorDisplay","result","error","phase","className","name","stack","toString","doTransform","sourceType","source","transform","destType","input","sourceConverters","type","data","trim","length","_","lodash","R","ramda","eval","destinationConverters","defaultRenderError","errorInfo","reset","href","onClick","ErrorWrapper","state","resetError","setState","undefined","this","props","renderError","render","React","Component","LoadableTable","Loadable","loader","loading","CellRenderer","value","JSON","stringify","TableView","memo","dataArray","Array","from","columnOrder","columnSet","Set","forEach","datum","Object","keys","column","has","push","add","getColumns","columns","map","col","accessor","Header","Cell","Error","extension","a","pXLSX","XLSX","ws","utils","json_to_sheet","wb","book_new","book_append_sheet","writeFile","Date","toISOString","ExportButton","label","format","Button","event","generateAndDownloadXlsx","alert","XlsxView","style","textAlign","csv","dsvFormat","scsv","tsv","parse","json","text","toml","yaml","safeLoad","stringTransform","fn","safeDump","table","element","xlsx","prettyNames","prettyDescriptions","MainLayout","sourceSamples","A","B","C","layoutNames","ThreeColumns","BottomCode","Editor","options","onChange","useState","lineWrapping","setLineWrapping","plainEditor","setPlainEditor","e","target","placeholder","onBeforeChange","editor","Icon","circular","position","right","bottom","link","title","navigator","clipboard","writeText","then","toast","Popup","trigger","hoverable","plain","basic","Checkbox","checked","SourceBox","onChangeSource","mode","theme","lineNumbers","TRANSFORM_PLACEHOLDER","TransformBox","onChangeTransform","DestBox","comp","readOnly","ConverterSelect","preventDefault","Dropdown","item","closeOnChange","Menu","minWidth","Item","key","active","description","Toolbar","setSourceType","loadSample","setDestType","layout","setLayout","fluid","secondary","size","entries","id","useLayoutState","createPersistedState","useTransformState","App","mainContent","setSource","setTransform","useMemo","split","defaultSize","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a1a0b0e1.chunk.js","sourcesContent":["import React from \"react\";\nimport { ErrorTransformResult } from \"./types\";\n\nexport const ErrorDisplay = ({ result: { error, phase } }: { result: ErrorTransformResult }) => (\n  <div className=\"error-result\">\n    <h2>\n      {error.name || \"Error\"} in {phase}\n    </h2>\n    {error.stack ? <div className=\"error-stack\">{error.stack}</div> : <b>{error.toString()}</b>}\n  </div>\n);\n","import { destinationConverters, sourceConverters } from \"./converters\";\nimport lodash from \"lodash\";\nimport * as ramda from \"ramda\";\nimport { TransformResult } from \"./types\";\n\nexport function doTransform(sourceType: string, source: string, transform: string, destType: string): TransformResult {\n  let input;\n  try {\n    input = sourceConverters[sourceType](source);\n  } catch (error) {\n    return { error, type: \"error\", phase: \"input\" };\n  }\n\n  let data = input;\n  if (transform.trim().length) {\n    try {\n      const _ = lodash; // eslint-disable-line\n      const R = ramda; // eslint-disable-line\n      eval(transform); // eslint-disable-line\n    } catch (error) {\n      return { error, type: \"error\", phase: \"transform\" };\n    }\n  }\n\n  try {\n    return destinationConverters[destType](data);\n  } catch (error) {\n    return { error, type: \"error\", phase: \"output\" };\n  }\n}\n","import React from \"react\";\n\ntype ErrorRenderer = (error: Error, errorInfo: React.ErrorInfo | undefined, reset: () => void) => React.ReactChild;\n\nconst defaultRenderError: ErrorRenderer = (error, errorInfo, reset) => (\n  <div>\n    Oops! An error occurred: ${error.toString()}\n    <br />\n    {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n    <a href=\"#\" onClick={reset}>\n      Try again\n    </a>\n  </div>\n);\n\ninterface ErrorWrapperProps {\n  render: () => React.ReactChild;\n  renderError?: ErrorRenderer;\n}\n\ninterface ErrorWrapperState {\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n}\n\nexport default class ErrorWrapper extends React.Component<ErrorWrapperProps, ErrorWrapperState> {\n  public state: ErrorWrapperState = {};\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n    this.setState({ error, errorInfo });\n  }\n\n  render() {\n    if (this.state.error) {\n      return (this.props.renderError || defaultRenderError)(this.state.error, this.state.errorInfo, this.resetError);\n    }\n    return this.props.render();\n  }\n\n  private resetError = () => {\n    this.setState({ error: undefined, errorInfo: undefined });\n  };\n}\n","import { DestinationConverter } from \"./types\";\nimport ErrorWrapper from \"./ErrorWrapper\";\nimport React from \"react\";\nimport { ErrorDisplay } from \"./ErrorDisplay\";\nimport { getColumns } from \"./table-utils\";\nimport Loadable from \"react-loadable\";\nimport { CellInfo } from \"react-table\";\n\nconst LoadableTable = Loadable({\n  loader: () => import(\"react-table\"),\n  loading: () => <div>Loading table</div>,\n});\n\nconst CellRenderer = ({ value }: CellInfo) => {\n  if (typeof value === \"object\") {\n    try {\n      value = JSON.stringify(value);\n    } catch (error) {\n      value = \"<unrenderable>\";\n    }\n  }\n  return <>{value}</>;\n};\n\nconst TableView = React.memo(({ data }: { data: any }) => {\n  try {\n    const dataArray = Array.from(data);\n    const columnOrder = getColumns(dataArray);\n    if (!columnOrder.length) {\n      return (\n        <ErrorDisplay\n          result={{\n            phase: \"output\",\n            error: new Error(\"Unable to figure out columns\"),\n            type: \"error\",\n          }}\n        />\n      );\n    }\n    return (\n      <LoadableTable\n        data={dataArray}\n        columns={columnOrder.map(col => ({ accessor: col, Header: col, Cell: CellRenderer }))}\n      />\n    );\n  } catch (error) {\n    return <ErrorDisplay result={{ phase: \"output\", error, type: \"error\" }} />;\n  }\n});\n\nexport const tableConverter: DestinationConverter = data => ({\n  error: null,\n  type: \"element\",\n  element: <ErrorWrapper render={() => <TableView data={data} />} />,\n});\n","export function getColumns(dataArray: any[]) {\n  const columnOrder: string[] = [];\n  const columnSet = new Set<string>();\n  dataArray.forEach(\n    datum =>\n      datum &&\n      Object.keys(datum as object).forEach(column => {\n        if (!columnSet.has(column)) {\n          columnOrder.push(column);\n          columnSet.add(column);\n        }\n      }),\n  );\n  return columnOrder;\n}\n","import { DestinationConverter } from \"./types\";\nimport React from \"react\";\nimport { Button } from \"semantic-ui-react\";\n\nasync function generateAndDownloadXlsx(data: any, extension: string) {\n  const pXLSX = import(\"xlsx\");\n  const dataArray = Array.from(data);\n  const XLSX = await pXLSX;\n  const ws = XLSX.utils.json_to_sheet(dataArray);\n  const wb = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(wb, ws, \"d2d\");\n  XLSX.writeFile(wb, `d2d-${new Date().toISOString()}.${extension}`);\n}\n\nconst ExportButton = ({ label, format, data }: { label: string; format: string; data: any }) => (\n  <Button\n    onClick={event => {\n      try {\n        generateAndDownloadXlsx(data, format);\n      } catch (error) {\n        alert(error);\n      }\n    }}\n  >\n    {label}\n  </Button>\n);\n\nconst XlsxView = ({ data }: { data: any }) => {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <ExportButton label=\"Download XLSX\" format=\"xlsx\" data={data} />\n      <ExportButton label=\"Download XLS\" format=\"xls\" data={data} />\n      <ExportButton label=\"Download ODS\" format=\"ods\" data={data} />\n    </div>\n  );\n};\n\nexport const xlsxConverter: DestinationConverter = data => ({\n  error: null,\n  type: \"element\",\n  element: <XlsxView data={data} />,\n});\n","import { dsvFormat } from \"d3-dsv\";\nimport toml from \"toml\";\nimport yaml from \"js-yaml\";\nimport { DestinationConverter, SourceConverter, StringTransformResult } from \"./types\";\nimport { tableConverter } from \"./TableView\";\nimport { xlsxConverter } from \"./XlsxView\";\n\nconst csv = dsvFormat(\",\");\nconst scsv = dsvFormat(\";\");\nconst tsv = dsvFormat(\"\\t\");\n\nexport const sourceConverters: { [key: string]: SourceConverter } = {\n  csv: csv.parse,\n  json: JSON.parse,\n  scsv: scsv.parse,\n  text: data => data,\n  toml: toml.parse,\n  tsv: tsv.parse,\n  yaml: yaml.safeLoad,\n};\n\nconst stringTransform = (fn: (data: any) => string) => (data: any) =>\n  ({ value: fn(data), type: \"string\" } as StringTransformResult);\n\nexport const destinationConverters: { [key: string]: DestinationConverter } = {\n  \"json-compact\": stringTransform(JSON.stringify),\n  csv: stringTransform(csv.format),\n  scsv: stringTransform(scsv.format),\n  json: stringTransform(data => JSON.stringify(data, null, 2)),\n  text: stringTransform(data => \"\" + data),\n  tsv: stringTransform(tsv.format),\n  yaml: stringTransform(yaml.safeDump),\n  table: tableConverter,\n  xlsx: xlsxConverter,\n};\n\nexport const prettyNames: { [key: string]: string } = {\n  \"json-compact\": \"JSON (compact)\",\n  csv: \"CSV\",\n  json: \"JSON\",\n  scsv: \"SCSV\",\n  table: \"Table\",\n  text: \"Text\",\n  toml: \"TOML\",\n  tsv: \"TSV\",\n  xlsx: \"XLS/XLSX\",\n  yaml: \"YAML\",\n};\n\nexport const prettyDescriptions: { [key: string]: string } = {\n  csv: \"Comma-separated values\",\n  scsv: \"Semicolon-separated values\",\n  tsv: \"Tab-separated values\",\n};\n","import React from \"react\";\n\nexport interface BaseTransformResult {}\n\nexport interface ElementTransformResult extends BaseTransformResult {\n  type: \"element\";\n  element: React.ReactChild;\n}\n\nexport interface StringTransformResult extends BaseTransformResult {\n  type: \"string\";\n  value: string;\n}\n\nexport interface ErrorTransformResult extends BaseTransformResult {\n  type: \"error\";\n  error: Error;\n  phase: \"input\" | \"transform\" | \"output\";\n}\n\nexport type TransformResult = ElementTransformResult | StringTransformResult | ErrorTransformResult;\nexport type SourceConverter = (data: any) => any;\nexport type DestinationConverter<T = TransformResult> = (data: any) => T;\n\nexport interface Styleable {\n  style?: React.CSSProperties;\n}\n\nexport enum MainLayout {\n  ThreeColumns = \"threeColumns\",\n  BottomCode = \"bottomCode\",\n}\n\nexport const layoutNames: { [layout in MainLayout]: string } = {\n  [MainLayout.ThreeColumns]: \"Three Columns\",\n  [MainLayout.BottomCode]: \"Code on Bottom\",\n};\n","const yaml = `\n- A: One\n  B: Two\n  C: Three\n- A: Two\n  B: Four\n  C: Five\n- A: Three\n  B: Six\n  C: Seven\n`.trim();\n\nconst toml = `# This is a TOML document.\ntitle = \"TOML Example\"\n[owner]\nname = \"Tom Preston-Werner\"\ndob = 1979-05-27T07:32:00-08:00 # First class dates`;\n\nconst tsv = `A\\tB\\tC\nOne\\tTwo\\tThree\nTwo\\tFour\\tFive\nThree\\tSix\\tSeven`;\n\nconst jsonData = [\n  {\n    A: \"One\",\n    B: \"Two\",\n    C: \"Three\",\n  },\n  {\n    A: \"Two\",\n    B: \"Four\",\n    C: \"Five\",\n  },\n  {\n    A: \"Three\",\n    B: \"Six\",\n    C: \"Seven\",\n  },\n];\n\nconst json = JSON.stringify(jsonData, null, 2);\n\nconst scsv = `\"A\",\"B\",\"C\"\n\"One\",\"Two\",\"Three\"\n\"Two\",\"Four\",\"Five\"\n\"Three\",\"Six\",\"Seven\"`;\n\nconst csv = `A,B,C\nOne,Two,Three\nTwo,Four,Five\nThree,Six,Seven`;\n\nexport const sourceSamples: any = {\n  \"json-compact\": \"json-compact\",\n  csv,\n  scsv,\n  json,\n  text: \"Some arbitrary text\",\n  tsv,\n  yaml,\n  toml,\n};\n","import { EditorConfiguration } from \"codemirror\";\nimport { Controlled as ControlledCodeMirror } from \"react-codemirror2\";\nimport React from \"react\";\nimport { Checkbox, Icon, Popup } from \"semantic-ui-react\";\nimport { toast } from \"react-semantic-toasts\";\n\ninterface EditorProps {\n  value: string;\n  options: Partial<EditorConfiguration>;\n  onChange: (newValue: string) => void;\n}\n\nconst Editor: React.FC<EditorProps> = ({ value, options, onChange }) => {\n  const [lineWrapping, setLineWrapping] = React.useState(false);\n  const [plainEditor, setPlainEditor] = React.useState(false);\n  const handleCopy = () =>\n    navigator.clipboard.writeText(value).then(\n      () => toast({ type: \"success\", title: `Copied ${value.length} characters.` }),\n      () => toast({ type: \"warning\", title: \"Copy failed.\" }),\n    );\n  return (\n    <>\n      {plainEditor ? (\n        <textarea value={value} onChange={e => onChange(e.target.value)} placeholder={options.placeholder} />\n      ) : (\n        <ControlledCodeMirror\n          className=\"code-editor\"\n          value={value}\n          options={{ ...options, lineWrapping }}\n          onBeforeChange={(editor, data, value) => onChange(value)}\n        />\n      )}\n      <Icon\n        circular\n        name=\"copy\"\n        style={{\n          position: \"absolute\",\n          right: \"35px\",\n          bottom: \"5px\",\n        }}\n        link\n        title=\"Copy content\"\n        onClick={handleCopy}\n      />\n      <Popup\n        trigger={\n          <Icon\n            circular\n            name=\"setting\"\n            style={{\n              position: \"absolute\",\n              right: \"5px\",\n              bottom: \"5px\",\n            }}\n          />\n        }\n        hoverable\n        plain\n        basic\n      >\n        <Checkbox\n          label=\"Wrap Lines\"\n          checked={lineWrapping}\n          onChange={(event, data) => setLineWrapping(!!data.checked)}\n        />\n        <br />\n        <Checkbox\n          label=\"Plain Editor\"\n          checked={plainEditor}\n          onChange={(event, data) => setPlainEditor(!!data.checked)}\n        />\n      </Popup>\n    </>\n  );\n};\n\nexport default Editor;\n","import React from \"react\";\nimport Editor from \"../Editor\";\nimport { dataTheme } from \"../consts\";\nimport { Styleable } from \"../types\";\nimport { prettyNames } from \"../converters\";\n\ninterface SourceProps extends Styleable {\n  source: string;\n  sourceType: string;\n  onChangeSource: (str: string) => void;\n}\n\nexport const SourceBox: React.FC<SourceProps> = ({ sourceType, source, onChangeSource, style }) => (\n  <div className=\"codebox-wrapper\" style={style}>\n    <Editor\n      value={source}\n      options={{\n        mode: sourceType,\n        theme: dataTheme,\n        lineNumbers: true,\n        placeholder: `Paste or type in ${prettyNames[sourceType] || sourceType} data here.`,\n      }}\n      onChange={onChangeSource}\n    />\n  </div>\n);\n","export const dataTheme = \"solarized light\";\nexport const codeTheme = \"solarized dark\";\n","import React from \"react\";\nimport Editor from \"../Editor\";\nimport { codeTheme } from \"../consts\";\nimport { Styleable } from \"../types\";\n\ninterface TransformProps extends Styleable {\n  transform: string;\n  onChangeTransform: (s: string) => void;\n}\n\nconst TRANSFORM_PLACEHOLDER = `\n// Feel free to modify \\`data\\` using JavaScript here.\n// * Lodash is available as \\`_\\`\n// ** e.g. \\`_.reverse(data)\\`\n// * Ramda is available as \\`R\\`\n// ** e.g. \\`data = R.reverse(data)\\`\n`.trim();\nexport const TransformBox: React.FC<TransformProps> = ({ transform, onChangeTransform, style }) => (\n  <div className=\"codebox-wrapper\" style={style}>\n    <Editor\n      value={transform}\n      options={{\n        mode: \"javascript\",\n        theme: codeTheme,\n        lineNumbers: true,\n        placeholder: TRANSFORM_PLACEHOLDER,\n      }}\n      onChange={onChangeTransform}\n    />\n  </div>\n);\n","import React from \"react\";\nimport Editor from \"../Editor\";\nimport { dataTheme } from \"../consts\";\nimport { ErrorDisplay } from \"../ErrorDisplay\";\nimport { Styleable, TransformResult } from \"../types\";\nimport { prettyNames } from \"../converters\";\n\ninterface DestProps extends Styleable {\n  destType: string;\n  result: TransformResult;\n}\n\nexport const DestBox: React.FC<DestProps> = ({ destType, result, style }) => {\n  let comp: React.ReactChild | null = null;\n  switch (result.type) {\n    case \"element\":\n      comp = result.element;\n      break;\n    case \"string\":\n      comp = (\n        <Editor\n          value={result.value}\n          options={{\n            mode: destType,\n            theme: dataTheme,\n            lineNumbers: true,\n            readOnly: true,\n            placeholder: `Output will appear here in ${prettyNames[destType] || destType}.`,\n          }}\n          onChange={() => void 8}\n        />\n      );\n      break;\n    case \"error\":\n      comp = <ErrorDisplay result={result} />;\n      break;\n  }\n  return (\n    <div className=\"codebox-wrapper\" style={style}>\n      {comp}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Dropdown, DropdownItemProps, Menu } from \"semantic-ui-react\";\nimport { destinationConverters, prettyDescriptions, prettyNames, sourceConverters } from \"../converters\";\nimport { layoutNames, MainLayout, Styleable } from \"../types\";\n\ninterface ConverterSelectProps extends Styleable {\n  label: string;\n  value: string;\n  options: string[];\n  onChange: (val: string) => void;\n}\n\nconst ConverterSelect: React.FC<ConverterSelectProps> = ({ label, value, options, onChange, style }) => {\n  const onClick = (event: any, props: DropdownItemProps) => {\n    onChange(props.name);\n    event.preventDefault();\n  };\n  return (\n    <Dropdown\n      item\n      text={`${label}: ${prettyNames[value] || value}`}\n      /* TODO: these have no effect :-/ */\n      closeOnChange={false}\n    >\n      <Dropdown.Menu style={{ minWidth: \"25em\" }}>\n        {options.map(item => (\n          <Dropdown.Item\n            key={item}\n            name={item}\n            active={value === item}\n            onClick={onClick}\n            text={prettyNames[item] || item}\n            description={prettyDescriptions[item]}\n          />\n        ))}\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n};\ntype Setter<T> = (t: T) => void;\n\ninterface ToolbarProps {\n  sourceType: string;\n  setSourceType: Setter<string>;\n  loadSample: () => void;\n  destType: string;\n  setDestType: Setter<string>;\n  layout: MainLayout;\n  setLayout: (layout: MainLayout) => void;\n}\n\nexport const Toolbar: React.FC<ToolbarProps> = props => {\n  const { sourceType, setSourceType, loadSample, destType, setDestType, layout, setLayout } = props;\n  return (\n    <Menu fluid secondary size=\"small\">\n      <ConverterSelect\n        label=\"Source Format\"\n        value={sourceType}\n        options={Object.keys(sourceConverters)}\n        onChange={setSourceType}\n      />\n      <ConverterSelect\n        label=\"Output Format\"\n        value={destType}\n        options={Object.keys(destinationConverters)}\n        onChange={setDestType}\n      />\n      <Menu.Menu position=\"right\">\n        <Menu.Item name=\"loadSample\" onClick={loadSample}>\n          Load {prettyNames[sourceType] || sourceType} Sample\n        </Menu.Item>\n        <Dropdown item text=\"Layout...\">\n          <Dropdown.Menu>\n            {Object.entries(layoutNames).map(([id, name]) => (\n              <Dropdown.Item\n                key={id}\n                name={id}\n                active={layout === id}\n                text={name}\n                onClick={(event, { name }) => setLayout(name as MainLayout)}\n              />\n            ))}\n          </Dropdown.Menu>\n        </Dropdown>\n      </Menu.Menu>\n    </Menu>\n  );\n};\n","import React from \"react\";\nimport { sourceSamples } from \"./samples\";\nimport { doTransform } from \"./core\";\nimport { MainLayout, TransformResult } from \"./types\";\nimport SplitPane from \"react-split-pane\";\nimport { SourceBox } from \"./components/SourceBox\";\nimport { TransformBox } from \"./components/TransformBox\";\nimport { DestBox } from \"./components/DestBox\";\nimport { Toolbar } from \"./components/Toolbar\";\nimport createPersistedState from \"use-persisted-state\";\nimport { SemanticToastContainer } from \"react-semantic-toasts\";\nimport \"react-semantic-toasts/styles/react-semantic-alert.css\";\n\nconst useLayoutState = createPersistedState(\"d2d-layout\");\nconst useTransformState = createPersistedState(\"d2d-transform\");\n\nconst App: React.FC = () => {\n  const [sourceType, setSourceType] = React.useState(\"yaml\");\n  const [source, setSource] = React.useState(\"\");\n  const loadSample = () => {\n    setSource(sourceSamples[sourceType]);\n  };\n  const [destType, setDestType] = React.useState(\"json\");\n  const [transform, setTransform] = useTransformState(\"\");\n  const [layout, setLayout] = useLayoutState(MainLayout.ThreeColumns);\n  const result: TransformResult = React.useMemo(() => doTransform(sourceType, source, transform, destType), [\n    sourceType,\n    source,\n    transform,\n    destType,\n  ]);\n  let mainContent: React.ReactNode;\n  switch (layout) {\n    case MainLayout.ThreeColumns:\n    default:\n      mainContent = (\n        <SplitPane split=\"vertical\" defaultSize=\"35%\">\n          <SourceBox source={source} sourceType={sourceType} onChangeSource={setSource} />\n          <SplitPane split=\"vertical\" defaultSize=\"40%\">\n            <TransformBox transform={transform} onChangeTransform={setTransform} />\n            <DestBox destType={destType} result={result} />\n          </SplitPane>\n        </SplitPane>\n      );\n      break;\n    case MainLayout.BottomCode:\n      mainContent = (\n        <SplitPane split=\"horizontal\" defaultSize=\"80%\">\n          <SplitPane split=\"vertical\" defaultSize=\"50%\">\n            <SourceBox source={source} sourceType={sourceType} onChangeSource={setSource} />\n            <DestBox destType={destType} result={result} />\n          </SplitPane>\n          <TransformBox transform={transform} onChangeTransform={setTransform} />\n        </SplitPane>\n      );\n      break;\n  }\n  return (\n    <>\n      <div id=\"settings\">\n        <Toolbar\n          sourceType={sourceType}\n          setSourceType={setSourceType}\n          loadSample={loadSample}\n          destType={destType}\n          setDestType={setDestType}\n          layout={layout}\n          setLayout={setLayout}\n        />\n      </div>\n      <div id=\"main-panes\">{mainContent}</div>\n      <SemanticToastContainer position=\"top-right\" />\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-table/react-table.css\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/solarized.css\";\nimport \"codemirror/mode/yaml/yaml\";\nimport \"codemirror/mode/toml/toml\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/addon/display/placeholder\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}