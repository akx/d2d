{"version":3,"sources":["core.tsx","App.tsx","index.tsx","ErrorWrapper.tsx","TableView.tsx","table-utils.tsx","XlsxView.tsx","converters.tsx","ErrorDisplay.tsx"],"names":["doTransform","sourceType","source","transform","destType","input","sourceConverters","error","type","phase","data","trim","length","_","lodash","R","ramda","eval","destinationConverters","ConverterSelect","value","options","onChange","style","handleClick","e","name","Menu","fluid","size","map","item","Item","active","onClick","SourceBox","onChangeSource","className","mode","theme","lineNumbers","placeholder","onBeforeChange","editor","TRANSFORM_PLACEHOLDER","TransformBox","onChangeTransform","DestBox","result","comp","element","readOnly","ErrorDisplay","App","React","useState","setSource","setSourceType","setDestType","setTransform","useMemo","id","Object","keys","split","defaultSize","ReactDOM","render","document","getElementById","defaultRenderError","errorInfo","reset","toString","href","ErrorWrapper","state","resetError","setState","undefined","this","props","renderError","Component","LoadableTable","Loadable","loader","loading","CellRenderer","JSON","stringify","TableView","memo","dataArray","Array","from","columnOrder","columnSet","Set","forEach","datum","column","has","push","add","getColumns","columns","col","accessor","Header","Cell","Error","extension","a","pXLSX","XLSX","ws","utils","json_to_sheet","wb","book_new","book_append_sheet","writeFile","Date","toISOString","ExportButton","label","format","Button","event","generateAndDownloadXlsx","alert","XlsxView","textAlign","csv","d3dsv","json","parse","text","toml","tsv","yaml","safeLoad","stringTransform","fn","safeDump","table","xlsx","stack"],"mappings":"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","file":"static/js/main.0a7da18e.chunk.js","sourcesContent":["import { destinationConverters, sourceConverters } from \"./converters\";\nimport lodash from \"lodash\";\nimport * as ramda from \"ramda\";\nimport { TransformResult } from \"./types\";\n\nexport function doTransform(sourceType: string, source: string, transform: string, destType: string): TransformResult {\n  let input;\n  try {\n    input = sourceConverters[sourceType](source);\n  } catch (error) {\n    return { error, type: \"error\", phase: \"input\" };\n  }\n\n  let data = input;\n  if (transform.trim().length) {\n    try {\n      const _ = lodash; // eslint-disable-line\n      const R = ramda; // eslint-disable-line\n      eval(transform); // eslint-disable-line\n    } catch (error) {\n      return { error, type: \"error\", phase: \"transform\" };\n    }\n  }\n\n  try {\n    return destinationConverters[destType](data);\n  } catch (error) {\n    return { error, type: \"error\", phase: \"output\" };\n  }\n}\n","import React from \"react\";\n\nimport { Controlled as ControlledCodeMirror } from \"react-codemirror2\";\nimport { destinationConverters, sourceConverters } from \"./converters\";\nimport { doTransform } from \"./core\";\nimport { Menu, MenuItemProps } from \"semantic-ui-react\";\nimport { TransformResult } from \"./types\";\nimport { ErrorDisplay } from \"./ErrorDisplay\";\nimport SplitPane from \"react-split-pane\";\n\nconst dataTheme = \"solarized light\";\nconst codeTheme = \"solarized dark\";\n\ninterface Styleable {\n  style?: React.CSSProperties;\n}\n\ninterface SourceProps extends Styleable {\n  source: string;\n  sourceType: string;\n  onChangeSource: (str: string) => void;\n}\n\ninterface TransformProps extends Styleable {\n  transform: string;\n  onChangeTransform: (s: string) => void;\n}\n\ninterface DestProps extends Styleable {\n  destType: string;\n  result: TransformResult;\n}\n\ninterface ConverterSelectProps extends Styleable {\n  value: string;\n  options: string[];\n  onChange: (val: string) => void;\n}\n\nconst ConverterSelect: React.FC<ConverterSelectProps> = ({ value, options, onChange, style }) => {\n  const handleClick = (e: React.MouseEvent, { name }: MenuItemProps) => name && onChange(name);\n  return (\n    <Menu fluid size=\"mini\" style={style}>\n      {options.map(item => (\n        <Menu.Item name={item} active={value === item} onClick={handleClick} />\n      ))}\n    </Menu>\n  );\n};\n\nconst SourceBox: React.FC<SourceProps> = ({ sourceType, source, onChangeSource, style }) => (\n  <div className=\"codebox-wrapper\" style={style}>\n    <ControlledCodeMirror\n      className=\"code-editor\"\n      value={source}\n      options={{\n        mode: sourceType,\n        theme: dataTheme,\n        lineNumbers: true,\n        placeholder: `Paste or type in ${sourceType} data here.`,\n      }}\n      onBeforeChange={(editor, data, value) => onChangeSource(value)}\n    />\n  </div>\n);\n\nconst TRANSFORM_PLACEHOLDER = `\n// Feel free to modify \\`data\\` using JavaScript here.\n// * Lodash is available as \\`_\\`\n// * Ramda is available as \\`R\\`\n`.trim();\n\nconst TransformBox: React.FC<TransformProps> = ({ transform, onChangeTransform, style }) => (\n  <div className=\"codebox-wrapper\" style={style}>\n    <ControlledCodeMirror\n      className=\"code-editor\"\n      value={transform}\n      options={{\n        mode: \"javascript\",\n        theme: codeTheme,\n        lineNumbers: true,\n        placeholder: TRANSFORM_PLACEHOLDER,\n      }}\n      onBeforeChange={(editor, data, value) => onChangeTransform(value)}\n    />\n  </div>\n);\n\nconst DestBox: React.FC<DestProps> = ({ destType, result, style }) => {\n  let comp: React.ReactChild | null = null;\n  switch (result.type) {\n    case \"element\":\n      comp = result.element;\n      break;\n    case \"string\":\n      comp = (\n        <ControlledCodeMirror\n          value={result.value}\n          className=\"code-editor\"\n          options={{\n            mode: destType,\n            theme: dataTheme,\n            lineNumbers: true,\n            readOnly: true,\n            placeholder: `Output will appear here in ${destType}.`,\n          }}\n          onBeforeChange={() => void 8}\n        />\n      );\n      break;\n    case \"error\":\n      comp = <ErrorDisplay result={result} />;\n      break;\n  }\n  return (\n    <div className=\"codebox-wrapper\" style={style}>\n      {comp}\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  const [source, setSource] = React.useState(\"\");\n  const [sourceType, setSourceType] = React.useState(\"text\");\n  const [destType, setDestType] = React.useState(\"text\");\n  const [transform, setTransform] = React.useState(\"\");\n  const result: TransformResult = React.useMemo(() => doTransform(sourceType, source, transform, destType), [\n    sourceType,\n    source,\n    transform,\n    destType,\n  ]);\n  return (\n    <>\n      <div id=\"settings\">\n        <div>\n          Input Format\n          <ConverterSelect value={sourceType} options={Object.keys(sourceConverters)} onChange={setSourceType} />\n        </div>\n        <div>\n          Output Format\n          <ConverterSelect value={destType} options={Object.keys(destinationConverters)} onChange={setDestType} />\n        </div>\n      </div>\n      <div id=\"main-panes\">\n        <SplitPane split=\"vertical\" defaultSize=\"35%\">\n          <SourceBox source={source} sourceType={sourceType} onChangeSource={setSource} />\n          <SplitPane split=\"vertical\" defaultSize=\"40%\">\n            <TransformBox transform={transform} onChangeTransform={setTransform} />\n            <DestBox destType={destType} result={result} />\n          </SplitPane>\n        </SplitPane>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-table/react-table.css\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/solarized.css\";\nimport \"codemirror/mode/yaml/yaml\";\nimport \"codemirror/mode/toml/toml\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/addon/display/placeholder\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React from \"react\";\n\ntype ErrorRenderer = (error: Error, errorInfo: React.ErrorInfo | undefined, reset: () => void) => React.ReactChild;\n\nconst defaultRenderError: ErrorRenderer = (error, errorInfo, reset) => (\n  <div>\n    Oops! An error occurred: ${error.toString()}\n    <br />\n    {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n    <a href=\"#\" onClick={reset}>\n      Try again\n    </a>\n  </div>\n);\n\ninterface ErrorWrapperProps {\n  render: () => React.ReactChild;\n  renderError?: ErrorRenderer;\n}\n\ninterface ErrorWrapperState {\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n}\n\nexport default class ErrorWrapper extends React.Component<ErrorWrapperProps, ErrorWrapperState> {\n  public state: ErrorWrapperState = {};\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n    this.setState({ error, errorInfo });\n  }\n\n  render() {\n    if (this.state.error) {\n      return (this.props.renderError || defaultRenderError)(this.state.error, this.state.errorInfo, this.resetError);\n    }\n    return this.props.render();\n  }\n\n  private resetError = () => {\n    this.setState({ error: undefined, errorInfo: undefined });\n  };\n}\n","import { DestinationConverter } from \"./types\";\nimport ErrorWrapper from \"./ErrorWrapper\";\nimport React from \"react\";\nimport { ErrorDisplay } from \"./ErrorDisplay\";\nimport { getColumns } from \"./table-utils\";\nimport Loadable from \"react-loadable\";\nimport { CellInfo } from \"react-table\";\n\nconst LoadableTable = Loadable({\n  loader: () => import(\"react-table\"),\n  loading: () => <div>Loading table</div>,\n});\n\nconst CellRenderer = ({ value }: CellInfo) => {\n  if (typeof value === \"object\") {\n    try {\n      value = JSON.stringify(value);\n    } catch (error) {\n      value = \"<unrenderable>\";\n    }\n  }\n  return <>{value}</>;\n};\n\nconst TableView = React.memo(({ data }: { data: any }) => {\n  try {\n    const dataArray = Array.from(data);\n    const columnOrder = getColumns(dataArray);\n    if (!columnOrder.length) {\n      return (\n        <ErrorDisplay\n          result={{\n            phase: \"output\",\n            error: new Error(\"Unable to figure out columns\"),\n            type: \"error\",\n          }}\n        />\n      );\n    }\n    return (\n      <LoadableTable\n        data={dataArray}\n        columns={columnOrder.map(col => ({ accessor: col, Header: col, Cell: CellRenderer }))}\n      />\n    );\n  } catch (error) {\n    return <ErrorDisplay result={{ phase: \"output\", error, type: \"error\" }} />;\n  }\n});\n\nexport const tableConverter: DestinationConverter = data => ({\n  error: null,\n  type: \"element\",\n  element: <ErrorWrapper render={() => <TableView data={data} />} />,\n});\n","export function getColumns(dataArray: any[]) {\n  const columnOrder: string[] = [];\n  const columnSet = new Set<string>();\n  dataArray.forEach(\n    datum =>\n      datum &&\n      Object.keys(datum as object).forEach(column => {\n        if (!columnSet.has(column)) {\n          columnOrder.push(column);\n          columnSet.add(column);\n        }\n      }),\n  );\n  return columnOrder;\n}\n","import { DestinationConverter } from \"./types\";\nimport React from \"react\";\nimport { Button } from \"semantic-ui-react\";\n\nasync function generateAndDownloadXlsx(data: any, extension: string) {\n  const pXLSX = import(\"xlsx\");\n  const dataArray = Array.from(data);\n  const XLSX = await pXLSX;\n  const ws = XLSX.utils.json_to_sheet(dataArray);\n  const wb = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(wb, ws, \"d2d\");\n  XLSX.writeFile(wb, `d2d-${new Date().toISOString()}.${extension}`);\n}\n\nconst ExportButton = ({ label, format, data }: { label: string; format: string; data: any }) => (\n  <Button\n    onClick={event => {\n      try {\n        generateAndDownloadXlsx(data, format);\n      } catch (error) {\n        alert(error);\n      }\n    }}\n  >\n    {label}\n  </Button>\n);\n\nconst XlsxView = ({ data }: { data: any }) => {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <ExportButton label=\"Download XLSX\" format=\"xlsx\" data={data} />\n      <ExportButton label=\"Download XLS\" format=\"xls\" data={data} />\n      <ExportButton label=\"Download ODS\" format=\"ods\" data={data} />\n    </div>\n  );\n};\n\nexport const xlsxConverter: DestinationConverter = data => ({\n  error: null,\n  type: \"element\",\n  element: <XlsxView data={data} />,\n});\n","import * as d3dsv from \"d3-dsv\";\nimport toml from \"toml\";\nimport yaml from \"js-yaml\";\nimport { DestinationConverter, SourceConverter, StringTransformResult } from \"./types\";\nimport { tableConverter } from \"./TableView\";\nimport { xlsxConverter } from \"./XlsxView\";\n\nexport const sourceConverters: { [key: string]: SourceConverter } = {\n  csv: d3dsv.csvParse,\n  json: JSON.parse,\n  text: data => data,\n  toml: toml.parse,\n  tsv: d3dsv.tsvParse,\n  yaml: yaml.safeLoad,\n};\n\nconst stringTransform = (fn: (data: any) => string) => (data: any) =>\n  ({ value: fn(data), type: \"string\" } as StringTransformResult);\n\nexport const destinationConverters: { [key: string]: DestinationConverter } = {\n  \"json-compact\": stringTransform(JSON.stringify),\n  csv: stringTransform(d3dsv.csvFormat),\n  json: stringTransform(data => JSON.stringify(data, null, 2)),\n  text: stringTransform(data => \"\" + data),\n  tsv: stringTransform(d3dsv.tsvFormat),\n  yaml: stringTransform(yaml.safeDump),\n  table: tableConverter,\n  xlsx: xlsxConverter,\n};\n","import React from \"react\";\nimport { ErrorTransformResult } from \"./types\";\n\nexport const ErrorDisplay = ({ result: { error, phase } }: { result: ErrorTransformResult }) => (\n  <div className=\"error-result\">\n    <h2>\n      {error.name || \"Error\"} in {phase}\n    </h2>\n    {error.stack ? <div className=\"error-stack\">{error.stack}</div> : <b>{error.toString()}</b>}\n  </div>\n);\n"],"sourceRoot":""}